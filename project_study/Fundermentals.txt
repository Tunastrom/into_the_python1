#2021.2.22 _ Fundermentals 


1. 복잡도
   1) 시간복잡도: 작업을 끝내는 데 걸리는 시간
   2) 공간복잡도: 작업을 진행하는 동안 차지하는 메모리공간의 양
   * 일반적으로 1), 2)는 서로 반비례한다.
     다만 시간복잡도가 충족되면 공간복잡도는 대체로 감수하는 편

2. 내부단편화 (internal fragmentation)

3. local symbol table

4. procedure
   : a set of coded instructions that tell a computer how to run a program or calculation.
    when computer is completed to running this. 
    this will not return a value, it's a different from function that have to return a value.  
    this may also be called a subroutine, subprogram or function.

5. Von neumann's <stored program computer>
   -Computer type that store programm data with command data into same memory
    

6. 명령어 집합(instruction set) or 명령어 집합구조(instruction set architecture)
   : These are Machine Language that can be understanded and executed, by microprocessor recognizing them. 
     It is lowest level of programming language.
     It contain all commands which can excuted by processor.
     = data type, command, register, adressing mode, momory structure, interupt, Exception Handling,
       external input/output etc..

    * opcode(operation code, instruction syllable, instruction parcel, obstring)

7. floating point
   1) 10진수를 2진수로 변환한다
      (1) 정수일 때
          : 1이 될때까지 2로 나눠가면서 각각의 나머지를 구하고, 구해진 나머지를 역순으로 결합한다
      (2) 실수일 때
          - 정수부는 (1)과 같이 처리
          - 0이될 때까지 소수부(10진수)에 2를 곱해가면서 정수부의 1,0을 뽑아낸다.
            그 후 첫번째로 뽑아낸 값부터 순서대로 결합. 
   2) 부동소수점 변환
      (1) 10진수에서의 부동소수점 표현
          : 4.22E+29 = 4.22x10^29 (^ = 제곱)
                  (가수부)x(기수)^(지수)
                          진법표기
      (2) 2진수의 정규화
           - 양수일 때
             : 1)에서 변환된 2진수의 제일 앞자리 1만 남게 소수점을 왼쪽으로 옮긴 후,
              옮긴 칸수 만큼 아래 식의 n 자리에 넣는다.

           - 음수일 때
             : 1)에서 변환된 2진수의 소수점을 오른쪽으로 옮겨 정수부가 1이 되게 한 후,
              옮긴 칸수 만큼 아래 식의 n 자리에 넣는다.

               1.xxxxx... * 2^n (여기서 n = 2진수)

      (2) 2진수 IEEE 754 부동소수점 표현
          - 32bit single-precision = float
            : 부호비트 1bit + 지수부 8bit  + 가수부 23bit
          - 64bit double-precision = double
            : 부호비트 1bit + 지수부 11bit + 가수부 52bit   
          - 부호비트 
            : 0 = 양수, 1 = 음수
              * 전체 수의 부호. 
          - 지수부
            : 정규화결과 얻어낸 2^n에서 n에 해당하는 수(2진수) 
              + bias (32bit: 127, 64bit: 1023)
                : 지수가 음수가 될 수도 있어 사용한다
                  지수부의 bit수 (32bit: 8bit, 64bit: 11bit)의 절반씩을 각각 양수, 음수 구간으로 구분
                  -> 32bit 음수: 0~127, 양수: 128~255
                     64bit 음수: 0~1023, 양수: 1024~2047
                     따라서 음수일 경우 그대로 지수(2진수)를 넣고
                            양수일 경우 양수 구간에 속하도록 bias값을 더한다.
          - 가수부
            : 정규화 결과 소수점 오른쪽에 있는 숫자들을 왼쪽부터 채워넣는다.
              남는 자리는 0으로 채운다. 
      (3) 2진수 excess표현
          - +-(1.m)x2^e-127
            부호(1.(가수))x(기수)^지수-127
                                     *bias*  
    <tip> 소수표현 오차 피하는 팁
      1. 실수를 무시한다. 
        10.000002 = 10.000000                                
      2. 소수를 정수로 변환 후 계산
        ex) 0.1 * 100 -> (1*100)/10
      
            